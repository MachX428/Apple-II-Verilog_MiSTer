//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// Sat Feb 19 2022 14:27:22
//
//      Input file      : 
//      Component name  : video_generator
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//
// Apple II/e Video Generation Logic
//
//
// Original Apple II+ Video Generation Logic by
// Stephen A. Edwards, sedwards@cs.columbia.edu
//
// This takes data from memory and various mode switches to produce the
// lookup address in the video ROM, and the result is fed to the video shift
// register.
//
// Based on the book Understanding the Apple IIe by Jim Sather
//
//-----------------------------------------------------------------------------

module video_generator(
    CLK_14M,
    CLK_7M,
    ALTCHAR,
    GR2,
    SEGA,
    SEGB,
    SEGC,
    WNDW_N,
    DL,
    LDPS_N,
    FLASH_CLK,
    VIDEO
);
    
    input       CLK_14M;		// 14.31818 MHz master clock
    input       CLK_7M;
    input       ALTCHAR;
    input       GR2;
    input       SEGA;
    input       SEGB;
    input       SEGC;
    input       WNDW_N;
    input [7:0] DL;		// Data from RAM
    input       LDPS_N;
    input       FLASH_CLK;		// Low-frequency flashing text clock
    output      VIDEO;
    
    
    // IIe signals
    wire [11:0] video_rom_addr;
    wire [7:0]  video_rom_out;
    reg [7:0]   video_shiftreg;
    
    //---------------------------------------------------------------------------
    //
    // Apple II/e Video generator circuit
    //
    // Chapter 8 of Understanding the Apple II by Jim Sather
    //
    //---------------------------------------------------------------------------
    
    assign video_rom_addr = {GR2, (DL[7] | ((~GR2) & DL[6] & FLASH_CLK & (~ALTCHAR))), (DL[6] & (ALTCHAR | GR2 | DL[7])), DL[5:0], SEGC, SEGB, SEGA};
    
    
    work.spram #(12, 8, "rtl/roms/video.mif") videorom(
        .address(video_rom_addr),
        .clock(CLK_14M),
        .data({12{1'b0}}),
        .wren(1'b0),
        .q(video_rom_out)
    );
    
    
    always @(posedge CLK_14M)
    begin: LS166
        
        begin
            if (CLK_7M == 1'b0)
            begin
                if (LDPS_N == 1'b0)		// load
                begin
                    if (WNDW_N == 1'b1)
                        video_shiftreg <= {8{1'b1}};
                    else
                        video_shiftreg <= video_rom_out;
                end
                else
                    // shift
                    video_shiftreg <= {video_shiftreg[0], video_shiftreg[7:1]};
            end
        end
    end
    
    assign VIDEO = (~video_shiftreg[0]);
    
endmodule
